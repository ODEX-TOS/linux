#!/usr/bin/env bash

# MIT License
# 
# Copyright (c) 2019 manilarome
# Copyright (c) 2020 Tom Meyers
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

URL="$2"

# $1 is the exit code
# $2 is the message
function log {
    len="$(( ${#2} - 1 ))"
    echo -en "$2 "
    printf '.%.0s' $(seq $(( 70 - $len )))

    if [[ ! "$1" -eq "0" ]]; then
        echo -e " \e[30m\e[41m FAILED  \e[49m\e[39m"
    else
        echo -e " \e[30m\e[42m SUCCESS \e[49m\e[39m"
    fi
}

function run_correct_branch {
    _branch=$(git branch --show-current)
    if [[ "$_branch" == "master" ]]; then
        log "1" "Pushing to master branch is not allowed"
        exit 1
    else
        log "0" "pushing to the correct branch"
    fi
}

function run_correct_remote {
    if [[ "$URL" == "git@github.com:ODEX-TOS/linux.git" || "$URL" == "https://github.com/ODEX-TOS/linux.git" ]]; then
        log "0" "Correct remote"
    else
        log "1" "Pushing to $URL"
        exit 1
    fi
}

function run_updated_pkgver {
    OUT=".PKGVER"
    INPUT="Makefile"
    VERSION="$(grep -E "^VERSION" $INPUT | cut -d= -f2 | sed -e 's/^[[:space:]]*//')"
    PATCHLEVEL="$(grep -E "^PATCHLEVEL" "$INPUT" | cut -d= -f2 | sed -e 's/^[[:space:]]*//')"
    SUBLEVEL="$(grep -E "^SUBLEVEL" "$INPUT" | cut -d= -f2 | sed -e 's/^[[:space:]]*//')"
    EXTRAVERSION="$(grep -E "^EXTRAVERSION" "$INPUT" | cut -d= -f2 | sed -e 's/^[[:space:]]*//' | tr '-' '.')"

    ORIGINAL="$(cat $OUT)"

    UPDATED="$VERSION.$PATCHLEVEL.$SUBLEVEL$EXTRAVERSION"
    UPDATED=$(printf "%s" "$UPDATED" | sed -r 's/\s+//g')

    if [[ "$ORIGINAL" == "$UPDATED" ]]; then
        log "0" "Updated .PKGVER"
    else
        log "1" "Updated .PKGVER"
        exit 1
    fi
}

run_correct_branch
run_correct_remote
run_updated_pkgver
